[{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Balamuta. Author, maintainer.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balamuta J (2024). SubdirSrc: Embedding Compiled Code Subdirectories Src. R package version 0.0.0.9000, https://github.com/coatless-rd-rcpp/rcpp-headers-subdirs, https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/.","code":"@Manual{,   title = {SubdirSrc: Embedding Compiled Code In Subdirectories of Src},   author = {James Balamuta},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/coatless-rd-rcpp/rcpp-headers-subdirs},   url = {https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/}, }"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/index.html","id":"including-c-code-in-a-subdirectory-within-the-src-directory","dir":"","previous_headings":"","what":"Including C++ code in a Subdirectory within the Src Directory","title":"Embedding Compiled Code In Subdirectories of Src","text":"SubdirSrc R package shows embed code subdirectories within src/ folder modifying Makevars file, specified Section: 1.2.1 Using Makevars Writing R Extensions, variant Make unique R. essence, project shows go : : Note: way use Rcpp Attributes subdirectories. , export function subdirectory src/ using // [[Rcpp::export]]. Thus, need create export intermediary function src/, e.g. calc_modifications() r-accessor--code.cpp. Make sure include headers associated subdirectories headers inclusion guard.","code":"src/     |-> Makevars     |-> Makevars.win     |-> r-accessor-to-code.cpp     |-> routineA.cpp     |-> routineA.h     |-> routineB.cpp     |-> routineB.h src/     |-> Makevars.in     |-> r-accessor-to-code.cpp     |-> A         |-> routineA.cpp         |-> routineA.h     |-> B         |-> routineB.cpp         |-> routineB.h"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/index.html","id":"usage","dir":"","previous_headings":"Including C++ code in a Subdirectory within the Src Directory","what":"Usage","title":"Embedding Compiled Code In Subdirectories of Src","text":"install package, must first compiler system compatible R. help obtaining compiler consult either macOS Windows guides. compiler hand, one can install package GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"coatless-rd-rcpp/rcpp-headers-subdirs\") library(\"SubdirSrc\")"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/index.html","id":"implementation-details","dir":"","previous_headings":"Including C++ code in a Subdirectory within the Src Directory","what":"Implementation Details","title":"Embedding Compiled Code In Subdirectories of Src","text":"compile code subdirectories src/, files contained must specified src/Makevars file OBJECTS variable. Listing individual files hand tedious prone error new files added included. Dynamically retrieving files subdirectory writing names preferred approach robust change. result, package uses configure file obtain names files write src/Makevars. configure file generated configure.ac running autoconf terminal. dynamic writing relies presence generic template, src/Makevars., produce output file, src/Makevars appropriate variables /paths set. src/Makevars.file acts input generic template. seeking resolve variable @SUBDIR_SOURCES@ files found subdirectories src/. src/Makevars output file created generic template running configure script. Within output file, note variable @SUBDIR_SOURCES@ replaced subdirectory file paths. , functions subdirectories can used including relevant header file function definitions. example, consider src//routineA.cpp, stores function implementation, src//routineA.h, stores function definition incorporates inclusion guard ensure one copy header file included. Though, use subdirectory functions traditional R function, one must specify export using Rcpp intermediary function rests src/. example can found lines 36 - 53 src/r-accessor--code.cpp.","code":"# Default make file PKG_CPPFLAGS=-I. PKG_LIBS=$(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)  # Include all C++ files in src/ and its subdirectories: src/A and src/B  SOURCES=r-accessor-to-code.cpp RcppExports.cpp @SUBDIR_SOURCES@               # Variable to place contents     ^^^^^^^^^^^^^^^^  # Obtain the object files OBJECTS=$(SOURCES:.cpp=.o)   # Make the shared object all: $(SHLIB)  # Provide recipe to remove all objects clean:     @rm -f $(OBJECTS) # Default make file PKG_CPPFLAGS=-I. PKG_LIBS=$(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)  # Include all C++ files in src/ and its subdirectories: src/A and src/B  SOURCES=r-accessor-to-code.cpp RcppExports.cpp A/routineA.cpp B/routineB.cpp                # Updated with variable contents ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  # Obtain the object files OBJECTS=$(SOURCES:.cpp=.o)   # Make the shared object all: $(SHLIB)  # Provide recipe to remove all objects clean:     @rm -f $(OBJECTS)"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/index.html","id":"alternative-implementation-strategies","dir":"","previous_headings":"Including C++ code in a Subdirectory within the Src Directory","what":"Alternative Implementation Strategies","title":"Embedding Compiled Code In Subdirectories of Src","text":"approach outlined may appear heavy handed use autoconf. two approaches possible: Jeroen Ooms rOpenSci opts call approach anticonf. example approach can seen curl package. Attempting wildcard approach specified Section 1.2.1.3: Compiling sub-directories Writing R Extensions first option viable, uncommon. opted avoid implementation gently provide standalone example autoconf setup. Meanwhile, second option ushers trouble later versions R. early commits, main way structured package. Nowadays, approach yield Warning checking R package attempts satisfy check cause subsequent warning. particular, warning given : can resolved modifying DESCRIPTION file include: result NOTE generated subsequent checks though:","code":"* checking for GNU extensions in Makefiles ... WARNING Found the following file(s) containing GNU extensions:   src/Makevars Portable Makefiles do not use GNU extensions such as +=, :=, $(shell), $(wildcard), ifeq ... endif. See section ‘Writing portable packages’ in the ‘Writing R Extensions’ manual. SystemRequirements: GNU make * checking for GNU extensions in Makefiles ... NOTE GNU make is a SystemRequirements."},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Embedding Compiled Code In Subdirectories of Src","text":"GPL (>= 2)","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/SubdirSrc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SubdirSrc: Embedding Compiled Code In Subdirectories of Src — SubdirSrc-package","title":"SubdirSrc: Embedding Compiled Code In Subdirectories of Src — SubdirSrc-package","text":"Provides implementation modify Makevars file permit compilation code found subdirectory `src` directory.","code":""},{"path":[]},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/SubdirSrc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SubdirSrc: Embedding Compiled Code In Subdirectories of Src — SubdirSrc-package","text":"Maintainer: James Balamuta balamut2@illinois.edu","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/exported_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Using Both Subdirectory Functions — calc_modifications","title":"Using Both Subdirectory Functions — calc_modifications","text":"function serve intermediaries R subdirectory source.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/exported_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using Both Subdirectory Functions — calc_modifications","text":"","code":"calc_modifications(x)  calc_A_export(x)  calc_B_export(x)"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/exported_funcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using Both Subdirectory Functions — calc_modifications","text":"x Vector Numeric Values length \\(n\\).","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/exported_funcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Using Both Subdirectory Functions — calc_modifications","text":"vector numeric values length \\(n\\).","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/exported_funcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Using Both Subdirectory Functions — calc_modifications","text":"exported function name different subdirectory function.  C++ allow duplicate function names parameters.  preserve original function name necessitates subdirectory function placed behind namespace, e.g. `::calc_A_routine()`. Otherwise, name function exported must different, e.g. `calc_A_export()`.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-headers-subdirs/reference/exported_funcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Using Both Subdirectory Functions — calc_modifications","text":"","code":"my_vec = c(3.5, 8, -1.5, -2, 0, 42) calc_modifications(my_vec) #> [1]  5 14 -5 -6 -2 82 my_vecA = c(881, 884, 1,2,-4) calc_A_export(my_vec) #> [1] -0.5  4.0 -5.5 -6.0 -4.0 38.0 my_vecB = c(512,32, -1, 1.3, 5.9) calc_B_export(my_vecB) #> [1] 514.0  34.0   1.0   3.3   7.9"}]
